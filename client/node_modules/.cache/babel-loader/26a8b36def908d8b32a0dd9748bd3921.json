{"ast":null,"code":"var _jsxFileName = \"/home/student/zad1/client/src/Fibonacci.js\";\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Fibonacci extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      seenIndexes: [],\n      values: {},\n      index: \"\"\n    };\n\n    this.handleSubmit = async event => {\n      event.preventDefault();\n\n      val: this.fib(this.state.index);\n\n      await axios.post(\"/api/insert\", {\n        setNumber: this.state.index\n      });\n      this.setState({\n        index: \"\",\n        values: [val]\n      });\n      this.fetchValues(); // this.fetchIndexes();\n    };\n  }\n\n  componentDidMount() {\n    this.fetchValues(); // this.fetchIndexes();\n  }\n\n  async fetchValues() {\n    const values = await axios.get(\"/api/get\");\n    this.setState({\n      values: values.data\n    });\n  } // async fetchIndexes() {\n  //   const seenIndexes = await axios.get(\"/api/values/all\");\n  //   this.setState({\n  //     seenIndexes: seenIndexes.data,\n  //   });\n  // }\n\n\n  renderSeenIndexes() {\n    return this.state.seenIndexes.map(_ref => {\n      let {\n        number\n      } = _ref;\n      return number;\n    }).join(\", \");\n  }\n\n  fib(ind) {\n    if (ind < 2) return 1;\n    return this.fib(ind - 1) + this.fib(index - 2);\n  }\n\n  renderValues() {\n    const entries = [];\n\n    for (let key in this.state.values) {\n      entries.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"For index \", key, \" I calculated \", this.state.values[key]]\n      }, key, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this));\n    }\n\n    return entries;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Enter your index:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          value: this.state.index,\n          onChange: event => this.setState({\n            index: event.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Indexes I have seen:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), this.renderSeenIndexes(), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Calculated Values:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), this.renderValues()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Fibonacci;","map":{"version":3,"sources":["/home/student/zad1/client/src/Fibonacci.js"],"names":["React","Component","axios","Fibonacci","state","seenIndexes","values","index","handleSubmit","event","preventDefault","val","fib","post","setNumber","setState","fetchValues","componentDidMount","get","data","renderSeenIndexes","map","number","join","ind","renderValues","entries","key","push","render","target","value"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\n\nclass Fibonacci extends Component {\n  state = {\n    seenIndexes: [],\n    values: {},\n    index: \"\",\n  };\n\n  componentDidMount() {\n    this.fetchValues();\n    // this.fetchIndexes();\n  }\n\n  async fetchValues() {\n    const values = await axios.get(\"/api/get\");\n    this.setState({ values: values.data });\n  }\n\n  // async fetchIndexes() {\n  //   const seenIndexes = await axios.get(\"/api/values/all\");\n  //   this.setState({\n  //     seenIndexes: seenIndexes.data,\n  //   });\n  // }\n\n  handleSubmit = async (event) => {\n    event.preventDefault();\n    val:this.fib(this.state.index);\n    await axios.post(\"/api/insert\", {\n      setNumber: this.state.index,\n    });\n    \n    this.setState({ index: \"\", values:[val] });\n    this.fetchValues();\n    // this.fetchIndexes();\n  };\n\n  renderSeenIndexes() {\n    return this.state.seenIndexes.map(({ number }) => number).join(\", \");\n  }\n\n  fib(ind) {\n    if(ind<2) return 1;\n    return this.fib(ind-1)+this.fib(index-2);\n  }\n\n  renderValues() {\n    const entries = [];\n\n    for (let key in this.state.values) {\n      entries.push(\n        <div key={key}>\n          For index {key} I calculated {this.state.values[key]}\n        </div>\n      );\n    }\n\n    return entries;\n  }\n\n  render() {\n    return (\n      <div>\n        <form onSubmit={this.handleSubmit}>\n          <label>Enter your index:</label>\n          <input\n            value={this.state.index}\n            onChange={(event) => this.setState({ index: event.target.value })}\n          />\n          <button>Submit</button>\n        </form>\n\n        <h3>Indexes I have seen:</h3>\n        {this.renderSeenIndexes()}\n\n        <h3>Calculated Values:</h3>\n        {this.renderValues()}\n      </div>\n    );\n  }\n}\n\nexport default Fibonacci;\n"]},"metadata":{},"sourceType":"module"}